var inputmode;
var car;
var default_number_rows;
var default_number_columns;

$( document ).ready(function() {
    default_number_rows = $('#default_number_rows').val()
    default_number_columns = $('#default_number_columns').val()
    initiation();
});

function initiation() {
    window.getSelection().removeAllRanges();
    getArrayofClass("edit_table").forEach(hide);
    getArrayofClass("add_rows").forEach(show);
    inputmode = 1;
    for (var r = 1; r < getTable().rows.length; r++) {
        setup(r.toString());
    }
    getInput('1','traditional').focus();
}

function getArrayofClass(name) {
    return Array.prototype.slice.call(document.getElementsByClassName(name));
}

function selectElementContents(el) {
    if (inputmode) changeInputsToText();
    var body = document.body, range, sel;
    if (document.createRange && window.getSelection) {
        range = document.createRange();
        sel = window.getSelection();
        sel.removeAllRanges();
        try {
            range.selectNodeContents(el);
            sel.addRange(range);
        } catch (e) {
            range.selectNode(el);
            sel.addRange(range);
        }
    } else if (body.createTextRange) {
        range = body.createTextRange();
        range.moveToElementText(el);
        range.select();
    }
}

function getInput(row, column) {
    return document.getElementById(row + getColumnNumber(column));
}

function getTable() {
    return document.getElementById('cihuibiao');
}

function getColumnNumber(name) {
    if (name == 'traditional' || name == '0')
        return '0';
    else if (name == 'simplified' || name == '1')
        return '1';
    else if (name == 'pinyin' || name == '2')
        return '2';
    else if (name == 'definition' || name == '3')
        return '3';
    else
        alert('Header does not exist');
}

function setup(row) {
    var traditional = getInput(row, 'traditional');
    var simplified = getInput(row, 'simplified');
    var pinyin = getInput(row, 'pinyin');
    var definition = getInput(row, 'definition');
    var all_cells = [traditional, simplified, pinyin, definition];
    traditional.oninput = function() {
        autofill(row, 'traditional', 'simplified');
    };
    simplified.oninput = function() {
        autofill(row, 'simplified', 'traditional');
    }
    pinyin.oninput = function() {
        numlat(row);
    };
    all_cells.forEach(addNavigationListener, parseInt(row));
}

function addNavigationListener(element, index, array) {
    var row = this;
    var column = index;
    element.onkeydown = function() {
        navigation(row, column);
    };
}

function navigation(row, column) {
    var table = getTable();
    var x = event.which || event.keyCode;
    // if (x == 13) {
    //     event.preventDefault();
    //     var next_row = row + 1;
    //     if (next_row >= table.rows.length)
    //         addRows();
    //     getInput(next_row.toString(), column.toString()).focus();
    // }
    // if (x == 13 || x == 40) {
    //     event.preventDefault();
    //     var next_row = row + 1;
    //     if (next_row >= table.rows.length)
    //         addRows();
    //     getInput(next_row.toString(), column.toString()).focus();
    // }
    // else if (x == 37) {
    //     event.preventDefault();
    //     var previous_column = column - 1;
    //     if (previous_column >= 0)
    //         getInput(row.toString(), previous_column.toString()).focus();
    // }
    // else if (x == 39) {
    //     event.preventDefault();
    //     var next_column = column + 1;
    //     if (next_column < default_number_columns)
    //         getInput(row.toString(), next_column.toString()).focus();
    // }
    // else if (x == 38) {
    //     event.preventDefault();
    //     var previous_row = row - 1;
    //     if (previous_row >= 1)
    //         getInput(previous_row.toString(), column.toString()).focus();
    // }

}

function autofill(row, orig_col, col_to_fill) {

	var orig_col_input = getInput(row, orig_col);
	var col_to_fill_input = getInput(row, col_to_fill);
	var pinyin = getInput(row, 'pinyin');
    var definition = getInput(row, 'definition');
	$.ajax({
		type: 'POST',
        beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
		url: 'home/autofill',
		data: {
            orig_col: orig_col,
            col_to_fill: col_to_fill,
            chars: orig_col_input.value
        },
		dataType: 'json',
		success: function(data) {
            // console.log(data)
            // autofill_data=JSON.parse(data)
            var autofill_data=data
            console.log(autofill_data)
            var full_col_to_fill = ""
            var full_pinyin = ""
            var generate_autocomplete = function(index) {
                var entry_history_array
                var autofill_choices=autofill_data[index].map(function(e) {
                    e.label = e.col_to_fill+" "+e.pinyin
                    return e
                })
                if (supports_html5_storage) {
                    var entry_history = localStorage[orig_col[0] + autofill_choices[0].orig_col]
                    entry_history_array = entry_history != undefined ? entry_history.split(" ") : []
                    autofill_choices = autofill_choices.map(function(e) {
                        e.entry_history = entry_history_array.indexOf(e.col_to_fill+e.pinyin)
                        return e
                    }).sort(function(a,b) {
                        var i = b.entry_history - a.entry_history
                        return i != 0 ? i : b.freq_count - a.freq_count
                    })
                }
                console.log(autofill_choices)
                // if (autofill_choices.length == 1) {
                //     col_to_fill_input.value=autofill_choices[0].col_to_fill
                //     pinyin.value=autofill_choices[0].pinyin
                // } else {
                    $("#"+row+getColumnNumber(orig_col)).autocomplete({
                        source: autofill_choices,
                        autoFocus: true,
                        delay: 0,
                        minLength: 0,
                        select: function(event, ui) {
                            event.preventDefault();
                            if (supports_html5_storage && autofill_choices.length > 1) {
                                var i = entry_history_array.indexOf(ui.item.col_to_fill+ui.item.pinyin)
                                if (i > -1) {
                                    entry_history_array.splice(i, 1)
                                }
                                entry_history_array.push(ui.item.col_to_fill+ui.item.pinyin)
                                localStorage[orig_col[0] + autofill_choices[0].orig_col] = entry_history_array.join(" ")
                            }
                            if (index == autofill_data.length - 1) {
                                col_to_fill_input.value=full_col_to_fill + ui.item.col_to_fill
                                pinyin.value=full_pinyin + " " + ui.item.pinyin
                                var table = getTable();
                                var next_row = parseInt(row) + 1;
                                if (next_row >= table.rows.length)
                                    addRows();
                                getInput(next_row.toString(), orig_col).focus();
                                $("#"+row+getColumnNumber(orig_col)).autocomplete( "destroy" );
                            } else {
                                full_col_to_fill = full_col_to_fill + ui.item.col_to_fill
                                full_pinyin = full_pinyin + " " + ui.item.pinyin
                                $("#"+row+getColumnNumber(orig_col)).autocomplete( "destroy" );
                                generate_autocomplete(index+1)
                            }
                        },
                        focus: function(event, ui) {
                            event.preventDefault();
                        }
                    })
                    $("#"+row+getColumnNumber(orig_col)).autocomplete( "search", "" );
                // }
            }
            generate_autocomplete(0)
            
			// pinyin.value=data.pinyin_def;
   //          definition.value=data.pinyin_def;
		},
		error: function() {
			alert('Ajax error!');
		}

	});
}

function getTextValue(r,c) {
    var table =  document.getElementById('cihuibiao');
    return table.rows[r].cells[c].innerHTML;
}

function getInputValue(r,c) {
    var table = document.getElementById('cihuibiao');
    return table.rows[r].cells[c].children[0].value;
}

function hide(element, index, array) {
    element.style.display="none";
}

function show(element, index, array) {
    element.style.display="inline";
}

function changeInputsToText() {
    inputmode = 0;
    getArrayofClass("edit_table").forEach(show);
    getArrayofClass("add_rows").forEach(hide);
    var table =  document.getElementById('cihuibiao');
    for (var r = 1, n = table.rows.length; r < n; r++) {
        if (getInputValue(r,0) == "") {
            while (table.rows[r]) {
                table.deleteRow(r);
            }
            break;
        }
        else {
            for (var c = 0, m = table.rows[r].cells.length; c < m; c++) {
                table.rows[r].cells[c].innerHTML = getInputValue(r,c);
            }
        }
    }
}

function changeTextToInputs() {
    var table = getTable();
    for (var r = 1, n = table.rows.length; r < n; r++) {
        for (var c = 0, m = table.rows[r].cells.length; c < m; c++) {
            table.rows[r].cells[c].innerHTML = "<input id='" + r.toString() + c.toString() + "', type='text', value='" + getTextValue(r,c) + "'>"
        }
    }
    while (table.rows.length <= default_number_rows)
        addRow();
    initiation();
}

function resetTable() {
    var table = getTable();
    while (table.rows[1])
        table.deleteRow(1);
    changeTextToInputs();
}

function addRow() {
    var table = getTable();
    var row = table.insertRow(-1);
    var r = table.rows.length - 1;
    for (var c = 0; c < default_number_columns; c++) {
        row.insertCell(c);
        table.rows[r].cells[c].innerHTML = "<input id='" + r.toString() + c.toString() + "', type='text', value=''>"
    }
    setup(r.toString());
}

function addRows() {
    for (var i = 0; i < 5; i++)
        addRow();
}

function numlat (row) {
    var pinyin = getInput(row, 'pinyin');
    var old = pinyin.value;
    car = pinyin.value.toLowerCase();
    car = car.replace(/a5/g, "a");
    car = car.replace(/e5/g, "e");
    car = car.replace(/i5/g, "i");
    car = car.replace(/o5/g, "o");
    car = car.replace(/u5/g, "u");
    car = car.replace(/v5/g, "ü");
    car = car.replace(/a1/g, "ā");
    car = car.replace(/a2/g, "á");
    car = car.replace(/a3/g, "ǎ");
    car = car.replace(/a4/g, "à"); 
    car = car.replace(/e1/g, "ē");
    car = car.replace(/e2/g, "é");
    car = car.replace(/e3/g, "ě");
    car = car.replace(/e4/g, "è"); 
    car = car.replace(/i1/g, "ī");
    car = car.replace(/i2/g, "í");
    car = car.replace(/i3/g, "ǐ");
    car = car.replace(/i4/g, "ì"); 
    car = car.replace(/o1/g, "ō"); 
    car = car.replace(/o2/g, "ó");
    car = car.replace(/o3/g, "ǒ");
    car = car.replace(/o4/g, "ò");
    car = car.replace(/u1/g, "ū");
    car = car.replace(/u2/g, "ú");
    car = car.replace(/u3/g, "ǔ");
    car = car.replace(/u4/g, "ù"); 
    car = car.replace(/v1/g, "ǖ"); 
    car = car.replace(/v2/g, "ǘ");
    car = car.replace(/v3/g, "ǚ");
    car = car.replace(/v4/g, "ǜ"); 
    car = car.replace(/an1/g, "ān");
    car = car.replace(/an2/g, "án");
    car = car.replace(/an3/g, "ǎn");
    car = car.replace(/an4/g, "àn");
    car = car.replace(/ang1/g, "āng");
    car = car.replace(/ang2/g, "áng");
    car = car.replace(/ang3/g, "ǎng");
    car = car.replace(/ang4/g, "àng");
    car = car.replace(/en1/g, "ēn");
    car = car.replace(/en2/g, "én");
    car = car.replace(/en3/g, "ěn");
    car = car.replace(/en4/g, "èn");
    car = car.replace(/eng1/g, "ēng");
    car = car.replace(/eng2/g, "éng");
    car = car.replace(/eng3/g, "ěng");
    car = car.replace(/eng4/g, "èng");
    car = car.replace(/in1/g, "īn");
    car = car.replace(/in2/g, "ín");
    car = car.replace(/in3/g, "ǐn");
    car = car.replace(/in4/g, "ìn"); 
    car = car.replace(/ing1/g, "īng");
    car = car.replace(/ing2/g, "íng");
    car = car.replace(/ing3/g, "ǐng");
    car = car.replace(/ing4/g, "ìng");
    car = car.replace(/ong1/g, "ōng");
    car = car.replace(/ong2/g, "óng");
    car = car.replace(/ong3/g, "ǒng");
    car = car.replace(/ong4/g, "òng");
    car = car.replace(/un1/g, "ūn");
    car = car.replace(/un2/g, "ún");
    car = car.replace(/un3/g, "ǔn");
    car = car.replace(/un4/g, "ùn"); 
    car = car.replace(/er2/g, "ér");
    car = car.replace(/er3/g, "ěr");
    car = car.replace(/er4/g, "èr");
    car = car.replace(/aō/g, "āo"); 
    car = car.replace(/aó/g, "áo");
    car = car.replace(/aǒ/g, "ǎo");
    car = car.replace(/aò/g, "ào");
    car = car.replace(/oū/g, "ōu"); 
    car = car.replace(/oú/g, "óu");
    car = car.replace(/oǔ/g, "ǒu");
    car = car.replace(/où/g, "òu");
    car = car.replace(/aī/g, "āi");
    car = car.replace(/aí/g, "ái");
    car = car.replace(/aǐ/g, "ǎi");
    car = car.replace(/aì/g, "ài"); 
    car = car.replace(/eī/g, "ēi");
    car = car.replace(/eí/g, "éi");
    car = car.replace(/eǐ/g, "ěi");
    car = car.replace(/eì/g, "èi"); 
    if (old != car)
        pinyin.value=car;
}

function supports_html5_storage() {
    try {
        return 'localStorage' in window && window['localStorage'] !== null;
    } catch (e) {
        return false;
    }
}